#!/usr/bin/env bash

RBFU_ROOT="$HOME/.rbfu"
COMMAND="$@"

# copied from http://stackoverflow.com/questions/370047/what-is-the-most-elegant-way-to-remove-a-path-from-the-path-variable-in-bash
path_append ()  { path_remove $1; export PATH="$PATH:$1"; }
path_prepend () { path_remove $1; export PATH="$1:$PATH"; }
path_remove ()  { export PATH=`echo -n $PATH | awk -v RS=: -v ORS=: '$0 != "'$1'"' | sed 's/:$//'`; }

set_variable () {
  if [ $RBFU_DEBUG ]; then echo "Setting $1 to '$2'"; fi
  export "$1"="$2";
}

unset_variable () {
  unset "$1"
}

activate_ruby () {
  RUBY_ROOT="$RBFU_ROOT/rubies/$1"

  # TODO: check if version exists; if not, try to install through ruby-build
  if [ ! -d $RUBY_ROOT ]; then
    echo "Ruby $1 requested, but not available."
    echo "Install using ruby-build:"
    echo ""
    echo "$ ruby-build $1 $RUBY_ROOT"
    exit 1
  fi

  path_prepend "$RUBY_ROOT/bin"
  set_variable "RBFU_RUBY_VERSION" "$1"
  set_variable "GEM_PATH" "$RUBY_ROOT/lib/ruby/gems"
}

deactivate_ruby () {
  path_remove "$RBFU_ROOT/rubies/$1/bin"
  unset_variable "GEM_PATH"
}


# read requested version from ./.rbfu-version
RBFU_VERSION_FILE='./.rbfu-version'
if [ -f $RBFU_VERSION_FILE ]; then
  VERSION=`cat ./.rbfu-version`
else
  echo "Couldn't find .rbfu-version, aborting."
  exit 1  
fi

# clear previous binary path
if [ $RBFU_RUBY_VERSION ]; then deactivate_ruby $RBFU_RUBY_VERSION; fi

# export new variables
echo "Switching to Ruby $VERSION"
activate_ruby $VERSION

# run specified command
if [ "$COMMAND" ]; then
  exec $COMMAND
fi
