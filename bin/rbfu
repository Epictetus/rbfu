#!/usr/bin/env bash

# copied from http://stackoverflow.com/questions/370047/what-is-the-most-elegant-way-to-remove-a-path-from-the-path-variable-in-bash
path_append ()  { path_remove $1; export PATH="$PATH:$1"; }
path_prepend () { path_remove $1; export PATH="$1:$PATH"; }
path_remove ()  { export PATH=`echo -n $PATH | awk -v RS=: -v ORS=: '$0 != "'$1'"' | sed 's/:$//'`; }
set_variable () {
  # echo "Setting $1 to '$2'";
  export "$1"="$2";
}

# get command line parameters
RBFU_VERSION_FILE='./.rbfu-version'
if [ -f $RBFU_VERSION_FILE ]; then
  VERSION=`cat ./.rbfu-version`
else
  echo "Couldn't find .rbfu-version, aborting."
  exit 1  
fi

COMMAND="$@"
RBFU_ROOT="/Users/hmans/.rbfu"
RUBY_ROOT="$RBFU_ROOT/rubies/$VERSION"

# TODO: check if version exists; if not, try to install through ruby-build
if [ ! -d $RUBY_ROOT ]; then
  echo "Ruby $VERSION requested, but not available."
  echo "Install using ruby-build:"
  echo ""
  echo "$ ruby-build $VERSION $RUBY_ROOT"
  exit 1
fi


# clear previous binary path

# export new variables
echo "Switching to Ruby $VERSION"
path_prepend "$RUBY_ROOT/bin"
set_variable "RBFU_VERSION" "$VERSION"
set_variable "GEM_PATH" "$RUBY_ROOT/lib/ruby/gems"

# run specified command
exec $COMMAND