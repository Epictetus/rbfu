#!/usr/bin/env bash

# Useful methods. \o/
#
set_variable () { export $1=$2; }
unset_variable () { unset $1; }

path_append ()  { path_remove $1; set_variable PATH "$PATH:$1"; }
path_prepend () { path_remove $1; set_variable PATH "$1:$PATH"; }
path_remove ()  { set_variable PATH `echo -n $PATH | awk -v RS=: -v ORS=: '$0 != "'$1'"' | sed 's/:$//'`; }

command_exists () { type "$1" &> /dev/null; }

warn () { echo -e "$1" >&2; }
info () { warn "$1"; }

# A bunch of useful variables.
#
RBFU_ROOT="$HOME/.rbfu"

# Run-time configuration
#
VERSION=$1; shift
SOURCE="from command line"

# fall back to $PWD/.rbfu-version and $HOME/.rbfu-version if no version is given
read_version_from_file () { if [ -f "$1" ]; then SOURCE="from $1"; VERSION=`cat $1`; fi; }
[[ $VERSION ]] || read_version_from_file "$PWD/.rbfu-version"
[[ $VERSION ]] || read_version_from_file "$HOME/.rbfu-version"

# sanity checks
[ ! $VERSION ] && warn "Please specify the Ruby version to activate." && return

deactivate_previous_ruby_version () {
  if [ $RBFU_RUBY_VERSION ]; then
    path_remove "$RBFU_ROOT/rubies/$RBFU_RUBY_VERSION/bin"
    unset_variable GEM_PATH
    unset_variable RBFU_RUBY_VERSION
  fi
}

if [ $VERSION == "system" ]; then
  deactivate_previous_ruby_version
  MSG="Activated system Ruby."
else
  # additional sanity checks
  RUBY_ROOT="$RBFU_ROOT/rubies/$VERSION"
  if [ ! -e $RUBY_ROOT ]; then
    warn "Ruby $VERSION was requested, but is not installed. ($SOURCE)"
    warn "If you have ruby-build installed, you can install the requested version like this:"
    warn "$ ruby-build $VERSION \$HOME/.rbfu/rubies/$VERSION"
    return 1
  fi

  deactivate_previous_ruby_version

  # activate requested version
  path_prepend "$RUBY_ROOT/bin"
  set_variable "RBFU_RUBY_VERSION" "$VERSION"
  set_variable "GEM_PATH" "$RUBY_ROOT/lib/ruby/gems"

  MSG="Activated Ruby $RBFU_RUBY_VERSION."
fi

info "$MSG ($SOURCE)"
